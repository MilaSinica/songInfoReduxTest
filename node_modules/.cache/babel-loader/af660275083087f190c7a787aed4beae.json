{"ast":null,"code":"import _ from 'lodash';\nimport jsonPlaceholder from '../../api/jsonplaceholder';\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts()); //lodash unique methods filters array elements to have only unique ids\n  //lodash map methods lets us to create array only from the chosen properties\n\n  const userIds = _.uniq(_.map(getState().posts, 'userId'));\n\n  userIds.forEach(id => dispatch(fetchUser(id))); //chain lodash method lets us join bunch of additional functions\n\n  _.chain(getState().posts) //posts are provided by default as 1st parametr, need to provide only second\n  .map('userId') //takes the result of map method\n  .forEach(id => dispatch(fetchUser(id)));\n};\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('/posts');\n  dispatch({\n    type: \"FETCH_POSTS\",\n    payload: response.data\n  });\n};\nexport const fetchUser = userid => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${userid}`);\n  dispatch({\n    type: \"FETCH_USER\",\n    payload: response.data\n  });\n}; // //function returns a function, which returns a functions, which calls a function\n// export const fetchUser = userid => dispatch => _fetchUsers(userid, dispatch);\n// //memoize function prevents us from making the same api call for the same user - it memorizes the response and returns it if we call same function twice\n// const _fetchUsers = _.memoize(async(userid, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${userid}`);\n//     dispatch({\n//         type: \"FETCH_USER\",\n//         payload: response.data\n//     })\n// })","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/myfirstreact/src/actions/blogPosts/index.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","getState","fetchPosts","userIds","uniq","map","posts","forEach","id","fetchUser","chain","response","get","type","payload","data","userid"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACjE,QAAMD,QAAQ,CAACE,UAAU,EAAX,CAAd,CADiE,CAEjE;AACA;;AACA,QAAMC,OAAO,GAAGN,CAAC,CAACO,IAAF,CAAOP,CAAC,CAACQ,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAAhB;;AACAH,EAAAA,OAAO,CAACI,OAAR,CAAgBC,EAAE,IAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAA9B,EALiE,CAOjE;;AACAX,EAAAA,CAAC,CAACa,KAAF,CAAQT,QAAQ,GAAGK,KAAnB,EACI;AADJ,GAEKD,GAFL,CAES,QAFT,EAGI;AAHJ,GAIKE,OAJL,CAIaC,EAAE,IAAIR,QAAQ,CAACS,SAAS,CAACD,EAAD,CAAV,CAJ3B;AAMH,CAdM;AAgBP,OAAO,MAAMN,UAAU,GAAG,MAAM,MAAMF,QAAN,IAAkB;AAC9C,QAAMW,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAoB,QAApB,CAAvB;AACAZ,EAAAA,QAAQ,CAAC;AACLa,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CANM;AAQP,OAAO,MAAMN,SAAS,GAAGO,MAAM,IAAI,MAAMhB,QAAN,IAAkB;AACjD,QAAMW,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAqB,UAASI,MAAO,EAArC,CAAvB;AACAhB,EAAAA,QAAQ,CAAC;AACLa,IAAAA,IAAI,EAAE,YADD;AAELC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CANM,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import _ from 'lodash';\nimport jsonPlaceholder from '../../api/jsonplaceholder';\n\nexport const fetchPostsAndUsers = () => async(dispatch, getState) => {\n    await dispatch(fetchPosts());\n    //lodash unique methods filters array elements to have only unique ids\n    //lodash map methods lets us to create array only from the chosen properties\n    const userIds = _.uniq(_.map(getState().posts, 'userId'));\n    userIds.forEach(id => dispatch(fetchUser(id)));\n\n    //chain lodash method lets us join bunch of additional functions\n    _.chain(getState().posts,)\n        //posts are provided by default as 1st parametr, need to provide only second\n        .map('userId')\n        //takes the result of map method\n        .forEach(id => dispatch(fetchUser(id)));\n\n}\n\nexport const fetchPosts = () => async dispatch => {\n    const response = await jsonPlaceholder.get('/posts');\n    dispatch({\n        type: \"FETCH_POSTS\",\n        payload: response.data\n    })\n}\n\nexport const fetchUser = userid => async dispatch => {\n    const response = await jsonPlaceholder.get(`/users/${userid}`);\n    dispatch({\n        type: \"FETCH_USER\",\n        payload: response.data\n    })\n}\n\n// //function returns a function, which returns a functions, which calls a function\n// export const fetchUser = userid => dispatch => _fetchUsers(userid, dispatch);\n// //memoize function prevents us from making the same api call for the same user - it memorizes the response and returns it if we call same function twice\n// const _fetchUsers = _.memoize(async(userid, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${userid}`);\n//     dispatch({\n//         type: \"FETCH_USER\",\n//         payload: response.data\n//     })\n// })\n"]},"metadata":{},"sourceType":"module"}