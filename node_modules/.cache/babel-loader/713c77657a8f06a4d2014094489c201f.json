{"ast":null,"code":"import _ from 'lodash';\nimport jsonPlaceholder from '../../api/jsonplaceholder';\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  _.map(getState().posts, 'userId'); //await dispatch(fetchUser());\n\n};\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('/posts');\n  dispatch({\n    type: \"FETCH_POSTS\",\n    payload: response.data\n  });\n};\nexport const fetchUser = userid => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${userid}`);\n  dispatch({\n    type: \"FETCH_USER\",\n    payload: response.data\n  });\n}; // //function returns a function, which returns a functions, which calls a function\n// export const fetchUser = userid => dispatch => _fetchUsers(userid, dispatch);\n// //memoize function prevents us from making the same api call for the same user - it memorizes the response and returns it if we call same function twice\n// const _fetchUsers = _.memoize(async(userid, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${userid}`);\n//     dispatch({\n//         type: \"FETCH_USER\",\n//         payload: response.data\n//     })\n// })","map":{"version":3,"sources":["/Users/ludmila/Documents/work/react-tutorial/myfirstreact/src/actions/blogPosts/index.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","getState","fetchPosts","map","posts","response","get","type","payload","data","fetchUser","userid"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACjE,QAAMD,QAAQ,CAACE,UAAU,EAAX,CAAd;;AACAL,EAAAA,CAAC,CAACM,GAAF,CAAMF,QAAQ,GAAGG,KAAjB,EAAwB,QAAxB,EAFiE,CAGjE;;AAEH,CALM;AAOP,OAAO,MAAMF,UAAU,GAAG,MAAM,MAAMF,QAAN,IAAkB;AAC9C,QAAMK,QAAQ,GAAG,MAAMP,eAAe,CAACQ,GAAhB,CAAoB,QAApB,CAAvB;AACAN,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CANM;AAQP,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,MAAMX,QAAN,IAAkB;AACjD,QAAMK,QAAQ,GAAG,MAAMP,eAAe,CAACQ,GAAhB,CAAqB,UAASK,MAAO,EAArC,CAAvB;AACAX,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,YADD;AAELC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,GAAD,CAAR;AAIH,CANM,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import _ from 'lodash';\nimport jsonPlaceholder from '../../api/jsonplaceholder';\n\nexport const fetchPostsAndUsers = () => async(dispatch, getState) => {\n    await dispatch(fetchPosts());\n    _.map(getState().posts, 'userId');\n    //await dispatch(fetchUser());\n\n}\n\nexport const fetchPosts = () => async dispatch => {\n    const response = await jsonPlaceholder.get('/posts');\n    dispatch({\n        type: \"FETCH_POSTS\",\n        payload: response.data\n    })\n}\n\nexport const fetchUser = userid => async dispatch => {\n    const response = await jsonPlaceholder.get(`/users/${userid}`);\n    dispatch({\n        type: \"FETCH_USER\",\n        payload: response.data\n    })\n}\n\n// //function returns a function, which returns a functions, which calls a function\n// export const fetchUser = userid => dispatch => _fetchUsers(userid, dispatch);\n// //memoize function prevents us from making the same api call for the same user - it memorizes the response and returns it if we call same function twice\n// const _fetchUsers = _.memoize(async(userid, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${userid}`);\n//     dispatch({\n//         type: \"FETCH_USER\",\n//         payload: response.data\n//     })\n// })\n"]},"metadata":{},"sourceType":"module"}